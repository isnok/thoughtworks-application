# vim: set ft=ruby ts=2 sw=2 et:
# -*- mode: ruby -*-


VAGRANT_API_VERSION = '2'
Vagrant.configure(VAGRANT_API_VERSION) do |config|

  cfg = {
    'vm' => {
      'box' => 'bento/debian-8.5',
      'check_update' => false,
      'synced_folders' => false
    },
    'ssh' => {
      'private_key_path' => "vagrant_key",
      'forward_agent' => true
    },
    'provisioner' => {
      'ansible' => {
        'verbose' => true,
        'diff' => nil,
        'ask_sudo_pass' => false,
        'ask_vault_pass' => false
      }
    }
  }


  # vm configuration
  config.vm.box = cfg['vm']['box']
  config.vm.box_check_update = cfg['vm']['check_update']

  config.vm.define "training_env" do |d|

    d.vm.hostname = 'TrainingEnvironment'

    #if not cfg['vm']['synced_folders']
    #  d.vm.synced_folder '.', '/vagrant', id: 'vagrant-root', disabled: true
    #  d.vm.synced_folder '.', '/home/vagrant/sync', id: 'vagrant-root', disabled: true
    #end

    #d.ssh.private_key_path = 'vagrant_key'
    #d.ssh.forward_agent = true

    d.vm.network "forwarded_port", guest: 8080, host: 8080

    # provisioner configuration
    d.vm.provision "ansible" do |ansible|

      # configure ansible-galaxy
      #ansible.galaxy_roles_path = 'provisioning/roles/'
      #ansible.galaxy_role_file = 'provisioning/site.yml'
      #ansible.galaxy_command = 'ansible-galaxy install --role-file=%{role_file} --roles-path=%{roles_path}' # --ignore-errors --force'

      ## configure ansible-playbook
      ansible.playbook = 'training.yml'
      ansible.sudo = true
      ansible.verbose = 'v'
      #ansible.playbook = 'provisioning/site.yml'

      #ansible.groups = {
      #  'vagrant' => ['TrainingEnvironment']
      #}
      #ansible.limit = 'vagrant'

      ##   dynamic ansible-playbook configuration based on environment variables
      #ansible.tags = ENV['ANSIBLE_TOMCAT_VAGRANT_ANSIBLE_TAGS']
      #ansible.skip_tags = ENV['ANSIBLE_TOMCAT_VAGRANT_ANSIBLE_SKIP_TAGS']
      ##   dynamic ansible-playbook configuration based on environment variables or user configuration
      ansible.verbose = cfg['provisioner']['ansible']['verbose']

      # ansible-playbook raw arguments
      ansible.raw_arguments = ['-vvv']

      #if ENV['ANSIBLE_TOMCAT_VAGRANT_ANSIBLE_CHECKMODE'] == '1'
        #ansible.raw_arguments << '--check'
      #end

      #if ENV['ANSIBLE_TOMCAT_VAGRANT_ANSIBLE_DIFFMODE'] == '1' or c['provisioner']['ansible']['diff']
        #ansible.raw_arguments << '--diff'
      #end

    end

    d.vm.provider :virtualbox do |v|
      v.customize 'pre-boot', ['modifyvm', :id, '--nictype1', 'virtio']
      v.customize [ 'modifyvm', :id, '--name', 'TrainingEnvironment', '--memory', '1024', '--cpus', '1' ]
    end

    d.vm.provider :libvirt do |lv|
      lv.memory = 1024
      lv.cpus = 1
    end

  end

end
